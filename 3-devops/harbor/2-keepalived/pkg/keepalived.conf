
global_defs {
  # 路由id：当前安装keepalived的节点主机标识符，保证全局唯一
   router_id keep_dev
}

# 业务应用检测脚本
vrrp_script check_pg_alived {
   # 业务应用检测脚本
   #一句指令或者一个脚本文件，需返回0(成功)或非0(失败)，keepalived以此为依据判断其监控的服务状态。
   script "/etc/keepalived/check_pg.sh"
   # 每隔两秒运行上一行脚本
   interval 2
   # 脚本运行的超时时间
   timeout 5
   # 配置几次检测失败才认为服务异常
   #2次失败再降级，两次返回1(即两次进程不存在)则优先级下降10
   fall 2
   # 配置几次检测成功才认为服务正常
   # rise 1
   # adjust priority by this weight, default 0
   # 优先级变化幅度，如果script中的指令执行失败，那么相应的vrrp_instance的优先级会减少10个点。
   weight -10
}

vrrp_instance VI_1 {
    # 表示状态是MASTER主机还是备用机BACKUP
    state BACKUP
    nopreempt
    #  该实例绑定的网卡,如：eth0
    interface Interface_Name
    # 保证主备节点一致即可
    virtual_router_id 10
    # 权重，master权重一般高于backup，如果有多个，那就是选举，谁的权重高，谁就当选
    priority PRIORITY_NUMBER
    # 主备之间同步检查时间间隔，单位秒
    advert_int 1
    # 认证权限密码，防止非法节点进入
    authentication {
        auth_type PASS
        auth_pass lhr
    }

    track_script {
        check_pg_alived
    }
    # 虚拟出来的ip，可以有多个（vip）
    virtual_ipaddress {
        # 注意：主备两台的vip都是一样的，绑定到同一个vip
        1.1.1.1
    }

}

